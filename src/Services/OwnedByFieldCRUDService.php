<?php

namespace Pyntax\Services;

use Pyntax\Contracts\Services\OwnedByFieldCRUDServiceInterface;
use Pyntax\Contracts\Models\ResourceModelInterface;
use Pyntax\Contracts\Repositories\RepositoryInterface;

/**
 * Class OwnedByFieldCRUDService
 *
 * @package Pyntax\Services
 */
class OwnedByFieldCRUDService extends ResourceCRUDService implements OwnedByFieldCRUDServiceInterface
{
    /**
     * @var null
     */
    protected $ownedByFieldId = null;

    /**
     * @var int
     */
    protected $ownedByFieldValue = null;

    /**
     * OwnedByFieldCRUDService constructor.
     *
     * @param  RepositoryInterface  $modelRepository
     *
     * @param  string  $ownedByFieldId
     */
    public function __construct(RepositoryInterface $modelRepository, string $ownedByFieldId)
    {
        parent::__construct($modelRepository);
        $this->ownedByFieldId = $ownedByFieldId;
    }

    /**
     * @param  int  $ownedByFieldValue
     */
    public function setOwnedByFieldValue($ownedByFieldValue): void
    {
        $this->ownedByFieldValue = $ownedByFieldValue;
    }

    /**
     * @return string
     */
    function getOwnedByFieldName(): string
    {
        return $this->ownedByFieldId;
    }

    /**
     * @param  int  $id
     * @param  int  $ownedByFieldId
     *
     * @return mixed|void
     */
    public function findById(int $id, int $ownedByFieldId)
    {
        return $this->modelRepository->read(
            [
                $this->modelRepository->getBaseModel()->getPrimaryKey() => $id,
                $this->getOwnedByFieldName()                            => $ownedByFieldId,
            ]
        );
    }

    /**
     * @param  int  $id
     * @param  int  $ownedByFieldId
     *
     * @return bool
     */
    public function deleteById(int $id, int $ownedByFieldId): bool
    {
        return $this->modelRepository->delete(
            [
                $this->modelRepository->getBaseModel()->getPrimaryKey() => $id,
                $this->getOwnedByFieldName()                            => $ownedByFieldId,
            ]
        );
    }

    /**
     * @param  array  $fieldsData
     *
     * @return ResourceModelInterface
     */
    public function create(array $fieldsData): ResourceModelInterface
    {
        if (!empty($this->ownedByFieldValue)) {
            $fieldsData[$this->getOwnedByFieldName()] = $this->ownedByFieldValue;
        }

        return parent::create($fieldsData); // TODO: Change the autogenerated stub
    }
}